/*
4. –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –≤—ã–∑–æ–≤–∞ (–ø—Ä–æ—Å—Ç–µ–π—à–∏–π throttler)

–ó–∞–¥–∞—á–∞:
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é void throttle(int minIntervalMs), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤—ã–∑–æ–≤ —Ç–æ–ª—å–∫–æ
–µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ minIntervalMs –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ —Å –ø—Ä–æ—à–ª–æ–≥–æ –≤—ã–∑–æ–≤–∞, –∏–Ω–∞—á–µ –∂–¥—ë—Ç.

üëâ –û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: –±–∞–∑–æ–≤—ã–π ¬´–æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —á–∞—Å—Ç–æ—Ç—ã¬ª —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏.
*/
#include <chrono>
#include <iostream>
#include <thread>

using namespace std;

void throttle(int min_interval_ms) {
  static auto last_call = chrono::steady_clock::now();
  auto now = chrono::steady_clock::now();
  auto interval =
      chrono::duration_cast<chrono::milliseconds>(now - last_call).count();
  if (interval < min_interval_ms) {
    this_thread::sleep_for(chrono::milliseconds(min_interval_ms - interval));
  }
  last_call = chrono::steady_clock::now();
}

int main() {
  for (int i = 0; i < 10; i++) {
    throttle(500);
    cout << "tick" << endl;
  }

  return 0;
}
